GLuint createAndCompileShaders(const char *vertexShaderSource, const char *fragmentShaderSource){
    GLuint vertexShader = glCreateShader(GL_VERTEX_SHADER);
    glShaderSource(vertexShader, 1, &vertexShaderSource, nullptr);
    glCompileShader(vertexShader);
    // check for shader compile errors
    int success;
    char infoLog[512];
    glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);
    if (!success)
    {
        glGetShaderInfoLog(vertexShader, 512, nullptr, infoLog);
        std::cout << "ERROR::SHADER::VERTEX::COMPILATION_FAILED\n" << infoLog << std::endl;
    }
    // fragment shader
    GLuint fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(fragmentShader, 1, &fragmentShaderSource, nullptr);
    glCompileShader(fragmentShader);
    // check for shader compile errors
    glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &success);
    if (!success)
    {
        glGetShaderInfoLog(fragmentShader, 512, nullptr, infoLog);
        std::cout << "ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\n" << infoLog << std::endl;
    }
    // link shaders
    GLuint shaderProgram = glCreateProgram();
    glAttachShader(shaderProgram, vertexShader);
    glAttachShader(shaderProgram, fragmentShader);
    glLinkProgram(shaderProgram);
    // check for linking errors
    glGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);
    if (!success) {
        glGetProgramInfoLog(shaderProgram, 512, nullptr, infoLog);
        std::cout << "ERROR::SHADER::PROGRAM::LINKING_FAILED\n" << infoLog << std::endl;
    }
    glDeleteShader(vertexShader);
    glDeleteShader(fragmentShader);

    return shaderProgram;
}

GLuint buildSimpleProgram(std::vector<std::vector<float>> &vertices, unsigned int VAO, unsigned int VBO, const char *vertexShaderSource, const char *fragmentShaderSource){
    GLuint shaderProgram = createAndCompileShaders(vertexShaderSource,fragmentShaderSource);
    std::vector<float> coords;
    for(std::vector<float> point : vertices){
        for(float coord : point){
            coords.push_back(coord);
        }
    }
    glBindVertexArray(VAO);
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, coords.size()*sizeof(float), &coords[0], GL_STATIC_DRAW);
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), nullptr);
    glEnableVertexAttribArray(0);
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBindVertexArray(VAO);
    return shaderProgram;
}


GLuint buildEBOProgram(std::vector<std::vector<float>> &vertices, std::vector<int> indices, unsigned int VAO, unsigned int VBO, unsigned int EBO, const char *vertexShaderSource, const char *fragmentShaderSource){
    GLuint shaderProgram = createAndCompileShaders(vertexShaderSource,fragmentShaderSource);
    std::vector<float> coords;
    for(std::vector<float> point : vertices){
        for(float coord : point){
            coords.push_back(coord);
        }
    }
    glBindVertexArray(VAO);
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, coords.size()*sizeof(float), &coords[0], GL_STATIC_DRAW);

    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size()*sizeof(int), &indices[0], GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), nullptr);
    glEnableVertexAttribArray(0);
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBindVertexArray(VAO);
    return shaderProgram;
}

GLuint buildEBORGBProgram(std::vector<std::vector<float>> &vertices, std::vector<int> indices, unsigned int VAO, unsigned int VBO, unsigned int EBO, const char *vertexShaderSource, const char *fragmentShaderSource){
    GLuint shaderProgram = createAndCompileShaders(vertexShaderSource,fragmentShaderSource);
    std::vector<float> coords;
    for(std::vector<float> point : vertices){
        for(float coord : point){
            coords.push_back(coord);
        }
    }
    glBindVertexArray(VAO);
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, coords.size()*sizeof(float), &coords[0], GL_STATIC_DRAW);

    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size()*sizeof(int), &indices[0], GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), static_cast<void*>(nullptr));
    glEnableVertexAttribArray(0);
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), reinterpret_cast<void*>(3 * sizeof(float)));
    glEnableVertexAttribArray(1);


    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBindVertexArray(VAO);
    return shaderProgram;
}

GLuint buildEBOTXTProgram(std::vector<std::vector<float>> &vertices, std::vector<int> indices, unsigned int VAO, unsigned int VBO, unsigned EBO, const char *vertexShaderSource, const char *fragmentShaderSource){
    GLuint shaderProgram = createAndCompileShaders(vertexShaderSource,fragmentShaderSource);
    std::vector<float> coords;
    for(std::vector<float> point : vertices){
        for(float coord : point){
            coords.push_back(coord);
        }
    }
    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, coords.size()*sizeof(vertices), &coords[0], GL_STATIC_DRAW);

    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size()*sizeof(indices), &indices[0], GL_STATIC_DRAW);

    // position attribute
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), static_cast<void*>(nullptr));
    glEnableVertexAttribArray(0);

    // color attribute
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), reinterpret_cast<void*>(3 * sizeof(float)));
    glEnableVertexAttribArray(1);

    // texture coordinates attribute
    glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), reinterpret_cast<void*>(6 * sizeof(float)));
    glEnableVertexAttribArray(2);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBindVertexArray(VAO);
    return shaderProgram;
}

GLuint buildRGBProgram(std::vector<std::vector<float>> &vector, unsigned int VAO, unsigned int VBO, const char *vertexShaderSource, const char *fragmentShaderSource){
    GLuint newShaderProgram = createAndCompileShaders(vertexShaderSource,fragmentShaderSource);
    std::vector<float> vertices;
    for(std::vector<float> point : vector){
        for(float coord : point){
            vertices.push_back(coord);
        }
    }
    int sizeOfVector = vertices.size();
    glBindVertexArray(VAO);
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeOfVector*sizeof(float), &vertices[0], GL_STATIC_DRAW);
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), static_cast<void*>(nullptr));
    glEnableVertexAttribArray(0);
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), reinterpret_cast<void*>(3 * sizeof(float)));
    glEnableVertexAttribArray(1);


    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBindVertexArray(VAO);
    return newShaderProgram;
}


void createCircle(std::vector<std::vector<float>> &circleVertices, std::vector<float> centre, float radius, float angle, int numAngles){
    float x,y,z = 0.0f;
    float inc = 2*3.1415f/numAngles;
    for(int i = 0; i<numAngles+1; i++){
        x = radius*cos(angle) + centre[0];
        y = radius*sin(angle) + centre[1];
        angle+=inc;
        circleVertices.push_back({x,y,z});
    }
}

void createEllipse(std::vector<std::vector<float>> &ellipseVertices, std::vector<float> centre, std::vector<float> radiuses, std::vector<float> angles, int numAngles){
    float x,y,z = 0.0f;
    float inc = 2*3.1415f/numAngles;

    float radiansStart = 3.1415f/180*angles[0];
    float radiansEnd = 3.1415f/180*angles[1];

    for(int i = 0; i<numAngles+1; i++){
        x = radiuses[0]*cos(radiansStart) + centre[0];
        y = radiuses[1]*sin(radiansEnd) + centre[1];
        radiansStart += inc;
        radiansEnd += inc;
        ellipseVertices.push_back({x,y,0.0f});
    }
}