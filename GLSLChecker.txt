#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <vector>
#include <iostream>
#include <cmath>

void framebuffer_size_callback(GLFWwindow* window, int width, int height);
void processInput(GLFWwindow *window);

// settings
const unsigned int SCR_WIDTH = 800;
const unsigned int SCR_HEIGHT = 600;

static const char *vertexShaderSource = "#version 330 core\n"
    "layout (location = 0) in vec3 aPos;\n"
    "layout (location = 1) in vec2 aTexCoord;\n"
    "out vec2 TexCoord;\n"
    "void main()\n"
    "{\n"
    "   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\n"
    "   TexCoord = vec2(aTexCoord.x, aTexCoord.y);\n"
    "}\0";
static const char *fragmentShaderSource = "#version 330 core\n"
    "out vec4 FragColor;\n"
    "uniform vec2 texSize;\n"
    "uniform float checker_size;\n"
    "in vec2 TexCoord;\n"
    "float checker(vec2 uv, float repeats)\n"
    "{\n"
    "   float cx = floor(repeats*uv.x);\n"
    "   float cy = floor(repeats*uv.y);\n"
    "   float result = mod(cx+cy,2.0);\n"
    "   return sign(result);\n"
    "}\n"
    "void main()\n"
    "{\n"
    "   vec2 uv = TexCoord.xy;\n"
    "   uv.x *= texSize.x/texSize.y;\n"
    "   float c = mix(1.0,0.0,checker(uv,checker_size));\n"
    "   FragColor = vec4(c,c,c, 1.0f);\n"
    "}\n\0";

GLuint createAndCompileShaders(const char *vertexShaderSource, const char *fragmentShaderSource){
    GLuint vertexShader = glCreateShader(GL_VERTEX_SHADER);
    glShaderSource(vertexShader, 1, &vertexShaderSource, nullptr);
    glCompileShader(vertexShader);
    // check for shader compile errors
    int success;
    char infoLog[512];
    glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);
    if (!success)
    {
        glGetShaderInfoLog(vertexShader, 512, nullptr, infoLog);
        std::cout << "ERROR::SHADER::VERTEX::COMPILATION_FAILED\n" << infoLog << std::endl;
    }
    // fragment shader
    GLuint fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(fragmentShader, 1, &fragmentShaderSource, nullptr);
    glCompileShader(fragmentShader);
    // check for shader compile errors
    glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &success);
    if (!success)
    {
        glGetShaderInfoLog(fragmentShader, 512, nullptr, infoLog);
        std::cout << "ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\n" << infoLog << std::endl;
    }
    // link shaders
    GLuint shaderProgram = glCreateProgram();
    glAttachShader(shaderProgram, vertexShader);
    glAttachShader(shaderProgram, fragmentShader);
    glLinkProgram(shaderProgram);
    // check for linking errors
    glGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);
    if (!success) {
        glGetProgramInfoLog(shaderProgram, 512, nullptr, infoLog);
        std::cout << "ERROR::SHADER::PROGRAM::LINKING_FAILED\n" << infoLog << std::endl;
    }
    glDeleteShader(vertexShader);
    glDeleteShader(fragmentShader);

    return shaderProgram;
}

GLuint buildSimpleProgram(std::vector<std::vector<float>> &vertices, unsigned int VAO, unsigned int VBO, const char *vertexShaderSource, const char *fragmentShaderSource){
    GLuint shaderProgram = createAndCompileShaders(vertexShaderSource,fragmentShaderSource);
    std::vector<float> coords;
    for(std::vector<float> point : vertices){
        for(float coord : point){
            coords.push_back(coord);
        }
    }
    glBindVertexArray(VAO);
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, coords.size()*sizeof(float), &coords[0], GL_STATIC_DRAW);
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), nullptr);
    glEnableVertexAttribArray(0);
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBindVertexArray(VAO);
    return shaderProgram;
}

GLuint buildSimpleTXTProgram(std::vector<std::vector<float>> &vertices, unsigned int VAO, unsigned int VBO, const char *vertexShaderSource, const char *fragmentShaderSource){
    GLuint shaderProgram = createAndCompileShaders(vertexShaderSource,fragmentShaderSource);
    std::vector<float> coords;
    for(std::vector<float> point : vertices){
        for(float coord : point){
            coords.push_back(coord);
        }
    }
    glBindVertexArray(VAO);
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, coords.size()*sizeof(float), &coords[0], GL_STATIC_DRAW);
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), static_cast<void*>(nullptr));
    glEnableVertexAttribArray(0);
    glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), reinterpret_cast<void*>(3*sizeof(float)));
    glEnableVertexAttribArray(1);
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBindVertexArray(VAO);
    return shaderProgram;
}


GLuint buildEBOProgram(std::vector<std::vector<float>> &vertices, std::vector<int> indices, unsigned int VAO, unsigned int VBO, unsigned int EBO, const char *vertexShaderSource, const char *fragmentShaderSource){
    GLuint shaderProgram = createAndCompileShaders(vertexShaderSource,fragmentShaderSource);
    std::vector<float> coords;
    for(std::vector<float> point : vertices){
        for(float coord : point){
            coords.push_back(coord);
        }
    }
    glBindVertexArray(VAO);
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, coords.size()*sizeof(float), &coords[0], GL_STATIC_DRAW);

    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size()*sizeof(int), &indices[0], GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), nullptr);
    glEnableVertexAttribArray(0);
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBindVertexArray(VAO);
    return shaderProgram;
}

GLuint buildEBORGBProgram(std::vector<std::vector<float>> &vertices, std::vector<int> indices, unsigned int VAO, unsigned int VBO, unsigned int EBO, const char *vertexShaderSource, const char *fragmentShaderSource){
    GLuint shaderProgram = createAndCompileShaders(vertexShaderSource,fragmentShaderSource);
    std::vector<float> coords;
    for(std::vector<float> point : vertices){
        for(float coord : point){
            coords.push_back(coord);
        }
    }
    glBindVertexArray(VAO);
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, coords.size()*sizeof(float), &coords[0], GL_STATIC_DRAW);

    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size()*sizeof(int), &indices[0], GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), static_cast<void*>(nullptr));
    glEnableVertexAttribArray(0);
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), reinterpret_cast<void*>(3 * sizeof(float)));
    glEnableVertexAttribArray(1);


    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBindVertexArray(VAO);
    return shaderProgram;
}

GLuint buildEBOTXTProgram(std::vector<std::vector<float>> &vertices, std::vector<int> indices, unsigned int VAO, unsigned int VBO, unsigned EBO, const char *vertexShaderSource, const char *fragmentShaderSource){
    GLuint shaderProgram = createAndCompileShaders(vertexShaderSource,fragmentShaderSource);
    std::vector<float> coords;
    for(std::vector<float> point : vertices){
        for(float coord : point){
            coords.push_back(coord);
        }
    }
    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, coords.size()*sizeof(vertices), &coords[0], GL_STATIC_DRAW);

    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size()*sizeof(indices), &indices[0], GL_STATIC_DRAW);

    // position attribute
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), static_cast<void*>(nullptr));
    glEnableVertexAttribArray(0);

    // color attribute
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), reinterpret_cast<void*>(3 * sizeof(float)));
    glEnableVertexAttribArray(1);

    // texture coordinates attribute
    glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), reinterpret_cast<void*>(6 * sizeof(float)));
    glEnableVertexAttribArray(2);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBindVertexArray(VAO);
    return shaderProgram;
}

GLuint buildRGBProgram(std::vector<std::vector<float>> &vector, unsigned int VAO, unsigned int VBO, const char *vertexShaderSource, const char *fragmentShaderSource){
    GLuint newShaderProgram = createAndCompileShaders(vertexShaderSource,fragmentShaderSource);
    std::vector<float> vertices;
    for(std::vector<float> point : vector){
        for(float coord : point){
            vertices.push_back(coord);
        }
    }
    int sizeOfVector = vertices.size();
    glBindVertexArray(VAO);
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeOfVector*sizeof(float), &vertices[0], GL_STATIC_DRAW);
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), static_cast<void*>(nullptr));
    glEnableVertexAttribArray(0);
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), reinterpret_cast<void*>(3 * sizeof(float)));
    glEnableVertexAttribArray(1);


    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBindVertexArray(VAO);
    return newShaderProgram;
}


void createCircle(std::vector<std::vector<float>> &circleVertices, std::vector<float> centre, float radius, float angle, int numAngles){
    float x,y,z = 0.0f;
    float inc = 2*3.1415f/numAngles;
    for(int i = 0; i<numAngles+1; i++){
        x = radius*cos(angle) + centre[0];
        y = radius*sin(angle) + centre[1];
        angle+=inc;
        circleVertices.push_back({x,y,z,x+x,y+y});
    }
}

void createEllipse(std::vector<std::vector<float>> &ellipseVertices, std::vector<float> centre, std::vector<float> radiuses, std::vector<float> angles, int numAngles){
    float x,y,z = 0.0f;
    float inc = 2*3.1415f/numAngles;

    float radiansStart = 3.1415f/180*angles[0];
    float radiansEnd = 3.1415f/180*angles[1];

    for(int i = 0; i<numAngles+1; i++){
        x = radiuses[0]*cos(radiansStart) + centre[0];
        y = radiuses[1]*sin(radiansEnd) + centre[1];
        radiansStart += inc;
        radiansEnd += inc;
        ellipseVertices.push_back({x,y,0.0f});
    }
}



int main()
{
    // glfw: initialize and configure
    // ------------------------------
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

#ifdef __APPLE__
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE); // uncomment this statement to fix compilation on OS X
#endif

    // glfw window creation
    // --------------------
    GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "LearnOpenGL", nullptr, nullptr);
    if (window == nullptr)
    {
        std::cout << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(window);
    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);

    // glad: load all OpenGL function pointers
    // ---------------------------------------
    if (!gladLoadGLLoader(GLADloadproc(glfwGetProcAddress)))
    {
        std::cout << "Failed to initialize GLAD" << std::endl;
        return -1;
    }



    float vertices_a[] = {
        -0.5f, -0.5f, 0.0f, // left
         0.5f, -0.5f, 0.0f, // right
         0.0f,  0.5f, 0.0f  // top
    };

    std::vector<std::vector<float>> circleVertices;
    createCircle(circleVertices, {0.0f,0.0f,0.0f}, 0.5f, 0.0f, 360);
    std::vector<std::vector<float>> vertices;
    vertices.push_back({vertices_a[0],vertices_a[1], vertices_a[2], 0.0f,0.0f});
    vertices.push_back({vertices_a[3], vertices_a[4], vertices_a[5], 1.0f, 0.0f});
    vertices.push_back({vertices_a[6], vertices_a[7], vertices_a[8], 0.5f, 1.0f});

    unsigned int VBO, VAO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);

    GLuint circleProgram = buildSimpleTXTProgram(circleVertices, VAO, VBO, vertexShaderSource, fragmentShaderSource);
    //GLuint checkerProgram = buildSimpleTXTProgram(vertices, VAO, VBO, vertexShaderSource, fragmentShaderSource);

    // uncomment this call to draw in wireframe polygons.
    //glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);

    // render loop
    // -----------
    while (!glfwWindowShouldClose(window))
    {
        // input
        // -----
        processInput(window);

        // render
        // ------
        glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT);

        // draw our first triangle
        glUseProgram(circleProgram);

        int vertexColorLocation = glGetUniformLocation(circleProgram, "texSize");
        int vertexCheckerSizeLocation = glGetUniformLocation(circleProgram, "checker_size");
        glUniform2f(vertexColorLocation, 16.0f, 16.0f);
        glUniform1f(vertexCheckerSizeLocation, 20.0f);


        glBindVertexArray(VAO); // seeing as we only have a single VAO there's no need to bind it every time, but we'll do so to keep things a bit more organized
        glDrawArrays(GL_TRIANGLE_FAN, 0, circleVertices.size()+2);
        // glBindVertexArray(0); // no need to unbind it every time

        // glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)
        // -------------------------------------------------------------------------------
        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    // optional: de-allocate all resources once they've outlived their purpose:
    // ------------------------------------------------------------------------
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);

    // glfw: terminate, clearing all previously allocated GLFW resources.
    // ------------------------------------------------------------------
    glfwTerminate();
    return 0;
}

// process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly
// ---------------------------------------------------------------------------------------------------------
void processInput(GLFWwindow *window)
{
    if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
        glfwSetWindowShouldClose(window, true);
}

// glfw: whenever the window size changed (by OS or user resize) this callback function executes
// ---------------------------------------------------------------------------------------------
void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
    // make sure the viewport matches the new window dimensions; note that width and
    // height will be significantly larger than specified on retina displays.
    glViewport(0, 0, width, height);
}

